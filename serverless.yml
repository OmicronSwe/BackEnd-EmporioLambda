service: backend-emporiolambda

frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  # you can overwrite defaults here
  # stage: dev
  region: eu-central-1
  environment:
    NAMESPACE: ${opt:stage, self:provider.stage}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: 'arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/*'

functions:
  prova2:
    handler: functions/prova2/handler.prova2
    events:
      - http:
          path: prova2
          method: POST
  prova:
    handler: functions/prova/handler.prova
    events:
      - http:
          path: prova
          method: POST
  hello:
    handler: functions/hello/handler.hello
    events:
      - http:
          path: hello
          method: GET

  #PRODUCT
  createProduct:
    handler: functions/product/product.create
    events:
      - http:
          path: product
          method: post
          cors: true

  listProduct:
    handler: functions/product/product.list
    events:
      - http:
          path: product
          method: get
          cors: true

  getFromIdProduct:
    handler: functions/product/product.get
    events:
      - http:
          path: product/getFromId/{id}
          method: get
          cors: true

  queryFromNameProduct:
    handler: functions/product/product.query
    events:
      - http:
          path: product/getFromName/{name}
          method: get
          cors: true

  updateProduct:
    handler: functions/product/product.update
    events:
      - http:
          path: product/{id}
          method: put
          cors: true

  deleteProduct:
    handler: functions/product/product.delete
    events:
      - http:
          path: product/{id}
          method: delete
          cors: true

resources:
  Resources:
    #COGNITO
    #Cognito - User pool
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:provider.environment.NAMESPACE}-user_pool
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: true
            RequireNumbers: true
            RequireSymbols: true
            RequireUppercase: true

        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email
        Schema:
          - AttributeDataType: String
            Name: email
            Required: true
            Mutable: true
            DeveloperOnlyAttribute: false
          - AttributeDataType: String
            Name: name
            Required: true
            Mutable: true
            DeveloperOnlyAttribute: false
          - AttributeDataType: String
            Name: family_name
            Required: true
            DeveloperOnlyAttribute: false
            Mutable: true
          - AttributeDataType: String
            Name: address
            Required: true
            DeveloperOnlyAttribute: false
            Mutable: true

    #Cognito - Client
    CognitoPoolCLient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:provider.environment.NAMESPACE}-user_pool_client
        UserPoolId:
          Ref: CognitoUserPool
        AllowedOAuthFlowsUserPoolClient: true
        SupportedIdentityProviders:
          - COGNITO
        AllowedOAuthFlows:
          - code
        AllowedOAuthScopes:
          - email
          - openid
          - profile
        CallbackURLs:
          - http://localhost:3000/api/auth/callback/cognito #(indirizzo dopo il login o registrazione)
        LogoutURLs:
          - http://localhost:3000 #da modificare (indirizzo dopo il logout)
        #DefaultRedirectURI: da inserire forse
        GenerateSecret: false

    #Cognito - ClienteGroup
    CognitoGroupCliente:
      Type: AWS::Cognito::UserPoolGroup
      Properties:
        Description: Clienti che acquisteranno i prodotti
        GroupName: Cliente
        #Precedence: Double
        #RoleArn: String
        UserPoolId:
          Ref: CognitoUserPool

    #Cognito - VenditoreAdminGroup
    CognitoGroupVenditoreAdmin:
      Type: AWS::Cognito::UserPoolGroup
      Properties:
        Description: Venditori e Admin che gestiscono il sito
        GroupName: VenditoreAdmin
        #Precedence: Double
        #RoleArn: String
        UserPoolId:
          Ref: CognitoUserPool

    #DYNAMO_DB
    ProductTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        KeySchema:
          - AttributeName: id
            KeyType: HASH

        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: name
            AttributeType: S

        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.NAMESPACE}-product
        GlobalSecondaryIndexes:
          - IndexName: name_index
            KeySchema:
              - AttributeName: name
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1

plugins:
  - serverless-plugin-typescript
  - serverless-mocha-plugin
